{
  "root": true,
  "env": {
    "es6": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": [
    "@typescript-eslint/eslint-plugin",
    "eslint-plugin-import",
    "eslint-plugin-react"
  ],
  "settings": {
    "import/resolver": "eslint-import-resolver-typescript",
    "react": { "version": "detect" }
  },
  "rules": {
    //#region eslint
    "complexity": ["error", 10],
    "eqeqeq": "error",
    "max-classes-per-file": ["error", 3],
    "max-len": [
      "error",
      { "code": 300, "ignoreStrings": true, "ignoreComments": true }
    ],
    "no-duplicate-case": "error",
    "no-return-await": "error",
    "no-sequences": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "sort-imports": [
      "error",
      { "ignoreDeclarationSort": true, "ignoreCase": true }
    ],
    "space-in-parens": ["error", "never"],
    "use-isnan": "error",
    //#endregion

    //#region @typescript/eslint rules that extend eslint base rules
    "no-duplicate-imports": "off",
    "@typescript-eslint/no-duplicate-imports": ["error"],

    "quotes": "off",
    "@typescript-eslint/quotes": [
      "warn",
      "single",
      { "allowTemplateLiterals": true }
    ],
    //#endregion

    //#region plugin
    "@typescript-eslint/no-explicit-any": "error",
    "import/no-deprecated": "warn",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": true,
        "optionalDependencies": false,
        "peerDependencies": false,
        "bundledDependencies": false
      }
    ],
    "import/order": [
      "warn",
      {
        "alphabetize": {
          "caseInsensitive": true,
          "order": "asc"
        },
        "groups": [
          ["external", "builtin"],
          ["parent", "sibling"]
        ],
        "newlines-between": "always-and-inside-groups"
      }
    ],
    "react/jsx-boolean-value": ["error", "always"],
    "react/jsx-closing-bracket-location": "warn",
    "react/jsx-curly-spacing": "warn",
    "react/jsx-equals-spacing": "warn",
    "react/jsx-key": "error",
    "react/jsx-no-bind": ["warn", { "allowArrowFunctions": true }],
    "react/jsx-wrap-multilines": "warn",
    "react/no-string-refs": "warn",
    "react/self-closing-comp": "warn",
    //#endregion

    //#region off rules, can remove tbh
    "arrow-parens": "off",
    "no-bitwise": "off",
    "no-magic-numbers": "off",
    "no-multiple-empty-lines": "off",
    "prefer-object-spread": "off",
    "radix": "off",
    "sort-keys": "off",
    "@typescript-eslint/no-magic-numbers": "off",
    "@typescript-eslint/no-namespace": "off",
    //#endregion

    //#region tslint:reccomended
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": "Avoid using the `Object` type. Did you mean `object`?",
          "Function": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
          "Boolean": "Avoid using the `Boolean` type. Did you mean `boolean`?",
          "Number": "Avoid using the `Number` type. Did you mean `number`?",
          "String": "Avoid using the `String` type. Did you mean `string`?",
          "Symbol": "Avoid using the `Symbol` type. Did you mean `symbol`?"
        }
      }
    ],
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "class",
        "format": ["PascalCase"]
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "line": {
          "markers": ["#region", "#endregion"]
        }
      }
    ],
    "curly": "error",
    "eol-last": "error",
    "guard-for-in": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit",
        "overrides": {
          "constructors": "off"
        }
      }
    ],
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": [
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "constructor",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method"
        ]
      }
    ],
    "new-parens": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": "error",
    "no-new-wrappers": "error",
    "no-debugger": "error",
    "constructor-super": "error",
    "no-empty": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "no-eval": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "path": "always",
        "types": "prefer-import",
        "lib": "always"
      }
    ],
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": [
      "error",
      {
        "ignoreFunctionTypeParameterNameValueShadow": true,
        "ignoreTypeValueShadow": true,
        "allow": ["State"]
      }
    ],
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-unsafe-finally": "error",
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      { "allowTernary": true }
    ],
    "no-var": "error",
    "quote-props": ["error", "consistent-as-needed"],
    "object-shorthand": "error",
    "brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": true
      }
    ],
    "one-var": ["error", "never"],
    "prefer-const": "error",
    "@typescript-eslint/prefer-for-of": "error",
    // TODO disabling for now, reevaluate after eslint migration
    // "semi": "off",
    // "@typescript-eslint/semi": "error",
    // "@typescript-eslint/member-delimiter-style": [
    // 	"error",
    // 	{
    // 		"multiline": {
    // 			"delimiter": "semi",
    // 			"requireLast": true
    // 		},
    // 		"singleline": {
    // 			"delimiter": "semi",
    // 			"requireLast": false
    // 		}
    // 	}
    // ],
    "semi": "error",
    "@typescript-eslint/semi": ["error"],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "asyncArrow": "always",
        "named": "never"
      }
    ],
    "comma-dangle": ["error", "always-multiline"],
    "@typescript-eslint/type-annotation-spacing": "error",
    "valid-typeof": "error",
    "@typescript-eslint/unified-signatures": "error"
    //#endregion
  }
}
